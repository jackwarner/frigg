service: frigg

custom:
  buildsTable:
    indexName: repository-branch
  webhookSecret: ${file(./lib/config.js):generateWebhookSecret}

provider:
  name: aws
  runtime: nodejs6.10
  stage: local
  environment:
    GITHUB_TOKEN: ${opt:githubToken}
    LOG_LEVEL:
      Fn::FindInMap: [ LogLevel, '${opt:stage, self:provider.stage}', level ]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - '*'

functions:

  HandleWebhook:
    handler: webhooks/handler.github
    events:
      - http:
          path: github
          method: post
          cors: true
    environment:
      UPSERT_PIPELINE_TOPIC: { Ref: 'SNSTopicUpsertpipeline${opt:stage, self:provider.stage}' }
      REMOVE_PIPELINE_TOPIC: { Ref: 'SNSTopicRemovepipeline${opt:stage, self:provider.stage}' }
      REMOVE_REPOSITORY_PIPELINES_TOPIC: { Ref: 'SNSTopicRemoverepositorypipelines${opt:stage, self:provider.stage}' }
      GITHUB_WEBHOOK_SECRET: ${self:custom.webhookSecret}

  ManageWebhook:
    handler: webhooks/github.manage
    environment:
      WEBHOOK_HANDLER_URL: { 'Fn::Join' : ['', [ 'https://', { 'Ref' : ApiGatewayRestApi }, '.execute-api.', { 'Ref' : 'AWS::Region' }, '.amazonaws.com/${opt:stage, self:provider.stage}/github' ] ] }
      GITHUB_WEBHOOK_SECRET: ${self:custom.webhookSecret}
      FRIGG_CONFIG_BUCKET: { Ref: FriggConfig }
    role: ServerlessAdminRole # Admin role needed for deploying serverless applications

  UpsertPipeline:
    handler: pipelines/handler.upsert
    timeout: 300 # 5 minutes
    events:
      - sns: upsert-pipeline-${opt:stage, self:provider.stage}
    environment:
      PIPELINE_ADDED: { Ref: 'SNSTopicPipelineadded${opt:stage, self:provider.stage}' }
    role: ServerlessAdminRole # Admin role needed for deploying serverless applications

  RemovePipeline:
    handler: pipelines/handler.removePipeline
    events:
      - sns: remove-pipeline-${opt:stage, self:provider.stage}
    environment:
      ODIN_REMOVE_STACK_TOPIC: ${cf:odin-${opt:stage, self:provider.stage}.DeleteStackSNS}
      PIPELINE_REMOVED: { Ref: 'SNSTopicPipelineremoved${opt:stage, self:provider.stage}' }
    role: ServerlessAdminRole # Admin role needed for removing serverless applications

  RemoveRepositoryPipelines:
    handler: pipelines/handler.removeRepository
    events:
      - sns: remove-repository-pipelines-${opt:stage, self:provider.stage}
    environment:
      ODIN_REMOVE_STACK_TOPIC: ${cf:odin-${opt:stage, self:provider.stage}.DeleteStackSNS}
      PIPELINE_REMOVED: { Ref: 'SNSTopicPipelineremoved${opt:stage, self:provider.stage}' }
    role: ServerlessAdminRole # Admin role needed for removing serverless applications

  SavePipelineStatus:
    handler: status/handler.pipelineAdded
    events:
      - sns: pipeline-added-${opt:stage, self:provider.stage}
    environment:
      PIPELINES_TABLE: { Ref: PipelinesTable }
    role: ServerlessAdminRole # Admin role not needed, change this

  RemovePipelineStatus:
    handler: status/handler.pipelineRemoved
    events:
      - sns: pipeline-removed-${opt:stage, self:provider.stage}
    environment:
      PIPELINES_TABLE: { Ref: PipelinesTable }
      BUILDS_TABLE: { Ref: BuildsTable }
    role: ServerlessAdminRole # Admin role not needed, change this

  SaveBuildStartedStatus:
    handler: status/handler.buildStarted
    events:
      - sns: build-started-${opt:stage, self:provider.stage} 
    environment:
      BUILDS_TABLE: { Ref: BuildsTable }
    role: ServerlessAdminRole # Admin role not needed, change this

  SaveBuildFinishedStatus:
    handler: status/handler.buildFinished
    events:
      - sns: build-finished-${opt:stage, self:provider.stage} 
    environment:
      BUILDS_TABLE: { Ref: BuildsTable }
    role: ServerlessAdminRole # Admin role not needed, change this


resources:
  Description: Automated service for managing CodePipelines for repos & branches inside a GitHub organization

  Mappings:
    LogLevel:
      test:
        level: debug
      local:
        level: debug
      automation:
        level: info
      production:
        level: info
  
  Resources:

    ServerlessAdminRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: FriggAdminDeployAccess-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Action: '*'
                  Resource: '*'
    
    PipelinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'owner/repository'
            AttributeType: S
          - AttributeName: branch
            AttributeType: S
        KeySchema:
          - AttributeName: 'owner/repository'
            KeyType: HASH
          - AttributeName: branch
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    
    BuildsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: 'owner/repository/branch'
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: 'owner/repository/branch'
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ManageWebhookCustomResource:
      Type: Custom::ManageWebhook
      Version: 1.0
      # TODO figure out which of these is latest and only depend on it
      DependsOn: [ ApiGatewayRestApi, ApiGatewayMethodGithubPost, ApiGatewayResourceGithub, HandleWebhookLambdaFunction, HandleWebhookLambdaPermissionApiGateway ]
      Properties:
        ServiceToken: { Fn::GetAtt: [ ManageWebhookLambdaFunction, Arn ] }

    FriggConfig:
      Type: AWS::S3::Bucket
