service: frigg

provider:
  name: aws
  runtime: nodejs6.10
  stage: local
  environment:
    GITHUB_TOKEN: ${opt:githubToken}
    LOG_LEVEL:
      Fn::FindInMap: [ LogLevel, '${opt:stage, self:provider.stage}', level ]
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:sns'
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - '*'

functions:

  GitHubEventHandler:
    handler: github/webhook.handler
    events:
      - http:
          path: github
          method: post
          cors: true
    environment:
      UPSERT_PIPELINE_TOPIC: { Ref: 'SNSTopicUpsertpipeline${opt:stage, self:provider.stage}' }
      REMOVE_PIPELINE_TOPIC: { Ref: 'SNSTopicRemovepipeline${opt:stage, self:provider.stage}' }
      GITHUB_WEBHOOK_SECRET:
        Fn::Join:
          - '-'
          - - '${opt:stage, self:provider.stage}'
            - Ref: AWS::AccountId

  UpsertPipeline:
    handler: pipelines/upsert.handler
    timeout: 300 # 5 minutes
    events:
      - sns: upsert-pipeline-${opt:stage, self:provider.stage}
    # Admin role needed for deploying serverless applications
    role: AdminDeployRole

  RemovePipeline:
    handler: pipelines/remove.handler
    events:
      - sns: remove-pipeline-${opt:stage, self:provider.stage}
    environment:
      ODIN_REMOVE_STACK_TOPIC: ${cf:odin-${opt:stage, self:provider.stage}.DeleteStackSNS}
    # Admin role needed for removing serverless applications
    role: AdminDeployRole

resources:
  Description: Automated service for managing CodePipelines for repos & branches inside a GitHub organization

  Mappings:
    LogLevel:
      test:
        level: debug
      local:
        level: debug
      automation:
        level: info
      production:
        level: info
  
  Resources:

    AdminDeployRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: FriggAdminDeployAccess-${opt:stage, self:provider.stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement: 
                - Effect: Allow
                  Action: '*'
                  Resource: '*'
    
    PipelinesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: repo-branch
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: repo-branch
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
